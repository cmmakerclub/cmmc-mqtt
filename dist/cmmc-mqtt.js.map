{"version":3,"sources":["cmmc-mqtt.js"],"names":["create","mqttOpts","subTopics","autoconnect","_forwardClient","_forwardPrefix","_opts","clone","_connectString","host","port","_mqtt","connect","_callbacks","on_connected","on_connecting","on_message","topic","payload","on_close","on_error","on_packetsend","packet","cmd","verbose","JSON","stringify","subscriptions","ret","call","on","publish","forEach","idx","subscribe","register","cbName","func","forward","mqttClient","options","prefix","debug"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;kBAEe;AACbA,UAAQ,gBAACC,QAAD,EAAkD;AAAA,QAAvCC,SAAuC,uEAA3B,EAA2B;AAAA,QAAvBC,WAAuB,uEAAT,IAAS;;AACxD,QAAIC,uBAAJ;AAAA,QAAoBC,uBAApB;AACA,QAAMC,QAAQ,qBAAEC,KAAF,CAAQN,QAAR,CAAd;AACA,QAAMO,iBAAoBF,MAAMG,IAA1B,SAAkCH,MAAMI,IAA9C;AACA,QAAMC,QAAQ,eAAKC,OAAL,CAAaJ,cAAb,CAAd;AACA,QAAMK,aAAa;AACjBC,oBAAc,wBAAM,CAAG,CADN;AAEjBC,qBAAe,yBAAM,CAAG,CAFP;AAGjBC,kBAAY,oBAACC,KAAD,EAAQC,OAAR,EAAoB,CAAG,CAHlB;AAIjBC,gBAAU,oBAAM,CAAG,CAJF;AAKjBC,gBAAU,oBAAM,CAAG,CALF;AAMjBC,qBAAe,uBAACC,MAAD,EAAY;AACzB,YAAIA,OAAOC,GAAP,KAAe,WAAnB,EAAgC;AAC9B,wBAAOC,OAAP,6BAAyCC,KAAKC,SAAL,CAAeJ,OAAOK,aAAtB,CAAzC;AACD,SAFD,MAEO;AACL,wBAAOH,OAAP,YAAwBF,OAAOC,GAA/B,mBAAgDE,KAAKC,SAAL,CAAeJ,MAAf,CAAhD;AACD;AACF;AAZgB,KAAnB;AAcA,QAAMM,MAAM;AACVhB,eAAS,mBAAM;AACbC,mBAAWE,aAAX,CAAyBc,IAAzB;AACA;AACAlB,cAAMmB,EAAN,CAAS,YAAT,EAAuBjB,WAAWQ,aAAlC;AACAV,cAAMmB,EAAN,CAAS,SAAT,EAAoB,UAACb,KAAD,EAAQC,OAAR,EAAoB;AACtCL,qBAAWG,UAAX,CAAsBC,KAAtB,EAA6BC,OAA7B;AACA,cAAId,cAAJ,EAAoB;AAClBA,2BAAe2B,OAAf,MAA0B1B,cAA1B,GAA2CY,KAA3C,EAAoDC,OAApD;AACD;AACF,SALD;AAMAP,cAAMmB,EAAN,CAAS,OAAT,EAAkBjB,WAAWM,QAA7B;AACAR,cAAMmB,EAAN,CAAS,OAAT,EAAkBjB,WAAWO,QAA7B;AACAT,cAAMmB,EAAN,CAAS,SAAT,EAAoB,YAAM;AACxBjB,qBAAWC,YAAX,CAAwBe,IAAxB;AACA3B,oBAAU8B,OAAV,CAAkB,UAACf,KAAD,EAAQgB,GAAR;AAAA,mBAAgBtB,MAAMuB,SAAN,CAAgBjB,KAAhB,CAAhB;AAAA,WAAlB;AACD,SAHD;AAID,OAjBS;AAkBVkB,gBAAU,kBAACC,MAAD,EAASC,IAAT,EAAkB;AAC1B,YAAIxB,WAAWuB,MAAX,CAAJ,EAAwB;AACtB,wBAAOZ,OAAP,wBAAoCY,MAApC;AACAvB,qBAAWuB,MAAX,IAAqBC,IAArB;AACD,SAHD,MAGO;AACL,wBAAOb,OAAP,0CAAsDY,MAAtD;AACD;AACF,OAzBS;AA0BVE,eAAS,iBAACC,UAAD,EAAaC,OAAb,EAAyB;AAChCA,gBAAQC,MAAR,GAAiBD,QAAQC,MAAR,IAAkB,EAAnC;AACA,sBAAOC,KAAP,eAAyBF,QAAQC,MAAjC;AACArC,yBAAiBmC,UAAjB;AACAlC,yBAAiBmC,QAAQC,MAAzB;AACD,OA/BS;AAgCVV,eAAS,iBAACd,KAAD,EAAQC,OAAR,EAAoB;AAC3BP,cAAMoB,OAAN,CAAcd,KAAd,EAAqBC,OAArB;AACD;AAlCS,KAAZ;;AAqCA,QAAIf,WAAJ,EAAiB;AACfyB,UAAIhB,OAAJ;AACD;AACD,WAAOgB,GAAP;AACD;AA7DY,C","file":"cmmc-mqtt.js","sourcesContent":["import { logger } from './utils'\nimport _ from 'underscore'\nimport mqtt from 'mqtt'\n\nexport default {\n  create: (mqttOpts, subTopics = [], autoconnect = true) => {\n    let _forwardClient, _forwardPrefix\n    const _opts = _.clone(mqttOpts)\n    const _connectString = `${_opts.host}:${_opts.port}`\n    const _mqtt = mqtt.connect(_connectString)\n    const _callbacks = {\n      on_connected: () => { },\n      on_connecting: () => { },\n      on_message: (topic, payload) => { },\n      on_close: () => { },\n      on_error: () => { },\n      on_packetsend: (packet) => {\n        if (packet.cmd === 'subscribe') {\n          logger.verbose(`subscribing to topic = ${JSON.stringify(packet.subscriptions)}`)\n        } else {\n          logger.verbose(`cmd = ${packet.cmd}, packet = ${JSON.stringify(packet)}`)\n        }\n      }\n    }\n    const ret = {\n      connect: () => {\n        _callbacks.on_connecting.call(this)\n        // register callbacks\n        _mqtt.on('packetsend', _callbacks.on_packetsend)\n        _mqtt.on('message', (topic, payload) => {\n          _callbacks.on_message(topic, payload)\n          if (_forwardClient) {\n            _forwardClient.publish(`${_forwardPrefix}${topic}`, payload)\n          }\n        })\n        _mqtt.on('close', _callbacks.on_close)\n        _mqtt.on('error', _callbacks.on_error)\n        _mqtt.on('connect', () => {\n          _callbacks.on_connected.call(this)\n          subTopics.forEach((topic, idx) => _mqtt.subscribe(topic))\n        })\n      },\n      register: (cbName, func) => {\n        if (_callbacks[cbName]) {\n          logger.verbose(`register callback ${cbName}`)\n          _callbacks[cbName] = func\n        } else {\n          logger.verbose(`try to register unlisted callback = ${cbName}`)\n        }\n      },\n      forward: (mqttClient, options) => {\n        options.prefix = options.prefix || ''\n        logger.debug(`prefix = ${options.prefix}`)\n        _forwardClient = mqttClient\n        _forwardPrefix = options.prefix\n      },\n      publish: (topic, payload) => {\n        _mqtt.publish(topic, payload)\n      }\n    }\n\n    if (autoconnect) {\n      ret.connect()\n    }\n    return ret\n  }\n}\n"],"sourceRoot":"/Users/nat/projects/traffy/master-slave-v2/easy-mqtt/dist"}
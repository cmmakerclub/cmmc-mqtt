{"version":3,"sources":["cmmc-mqtt.js"],"names":["create","connectString","subTopics","autoconnect","_forwardClient","_forwardPrefix","_mqtt","connect","_callbacks","on_connected","on_connecting","on_message","topic","payload","on_close","on_error","on_packetsend","packet","cmd","verbose","JSON","stringify","subscriptions","ret","info","call","on","debug","toString","publish","forEach","idx","subscribe","register","cbName","func","forward","mqttClient","options","prefix"],"mappings":"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","file":"cmmc-mqtt.js","sourcesContent":["import { logger } from './utils'\nimport mqtt from 'mqtt'\n\nexport default {\n  create: (connectString, subTopics = [], autoconnect = true) => {\n    let _forwardClient, _forwardPrefix\n    const _mqtt = mqtt.connect(connectString)\n    const _callbacks = {\n      on_connected: () => { },\n      on_connecting: () => { },\n      on_message: (topic, payload) => { },\n      on_close: () => { },\n      on_error: () => { },\n      on_packetsend: (packet) => {\n        if (packet.cmd === 'subscribe') {\n          logger.verbose(`subscribing to topic = ${JSON.stringify(packet.subscriptions)}`)\n        } else {\n          logger.verbose(`cmd = ${packet.cmd} packet = ${JSON.stringify(packet)}`)\n        }\n      }\n    }\n    const ret = {\n      connect: () => {\n        logger.info(`connecting to mqtt broker with ${connectString}`)\n        _callbacks.on_connecting.call(this)\n        // register callbacks\n        _mqtt.on('packetsend', _callbacks.on_packetsend)\n        _mqtt.on('message', (topic, payload) => {\n          _callbacks.on_message(topic, payload)\n          logger.info(`[${connectString}] message arrived topic =  ${topic}`)\n          if (_forwardClient) {\n            logger.verbose(`[${connectString}] publish: ${_forwardPrefix}${topic}`)\n            logger.debug(payload.toString('hex'))\n            _forwardClient.publish(`${_forwardPrefix}${topic}`, payload)\n          }\n        })\n        _mqtt.on('close', _callbacks.on_close)\n        _mqtt.on('error', _callbacks.on_error)\n        _mqtt.on('connect', () => {\n          logger.info(`${connectString} connected.`)\n          _callbacks.on_connected.call(this)\n          subTopics.forEach((topic, idx) => {\n            logger.info(`${connectString} subscribing to topic: ${topic}`)\n            _mqtt.subscribe(topic)\n          })\n        })\n      },\n      register: (cbName, func) => {\n        if (_callbacks[cbName]) {\n          logger.verbose(`register callback ${cbName}`)\n          _callbacks[cbName] = func\n        } else {\n          logger.verbose(`try to register unlisted callback = ${cbName}`)\n        }\n      },\n      forward: (mqttClient, options) => {\n        options.prefix = options.prefix || ''\n        logger.debug(`prefix = ${options.prefix}`)\n        _forwardClient = mqttClient\n        _forwardPrefix = options.prefix\n      },\n      publish: (topic, payload) => {\n        _mqtt.publish(topic, payload)\n      }\n    }\n\n    if (autoconnect) {\n      ret.connect()\n    }\n    return ret\n  }\n}\n"],"sourceRoot":"/Users/nat/projects/traffy/easy-mqtt/dist"}
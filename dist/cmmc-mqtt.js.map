{"version":3,"sources":["cmmc-mqtt.js"],"names":["create","connectString","subTopics","autoconnect","_forwardClient","_forwardPrefix","_mqtt","connect","_converterFn","input","_callbacks","on_connected","on_connecting","on_message","topic","payload","on_close","on_error","on_packetsend","packet","cmd","debug","JSON","stringify","subscriptions","ret","info","call","on","message","p","topics","forEach","k","verbose","options","publish","connack","idx","subscribe","register","cbName","func","forward","mqttClient","prefix","fn"],"mappings":"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","file":"cmmc-mqtt.js","sourcesContent":["import { logger } from './utils'\nimport mqtt from 'mqtt'\n\nexport default {\n  create: (connectString, subTopics = [], autoconnect = true) => {\n    let _forwardClient, _forwardPrefix\n    const _mqtt = mqtt.connect(connectString)\n    let _converterFn = (input) => input\n    const _callbacks = {\n      on_connected: () => { },\n      on_connecting: () => { },\n      on_message: (topic, payload) => { },\n      on_close: () => { },\n      on_error: () => { },\n      on_packetsend: (packet) => {\n        if (packet.cmd === 'subscribe') {\n          logger.debug(`subscribing to topic = ${JSON.stringify(packet.subscriptions)}`)\n        } else {\n          logger.debug(`cmd = ${packet.cmd} packet = ${JSON.stringify(packet)}`)\n        }\n      }\n    }\n    const ret = {\n      connect: () => {\n        logger.info(`connecting to mqtt broker with ${connectString}`)\n        _callbacks.on_connecting.call(this)\n\n        // register callbacks\n        _mqtt.on('packetsend', _callbacks.on_packetsend)\n        _mqtt.on('message', (topic, message, packet) => {\n          logger.debug(`message arrived topic =  ${topic}`)\n          logger.debug(`message arrived payload =  ${message}`)\n          _callbacks.on_message(topic, message)\n\n          if (_forwardClient) {\n            const p = _converterFn(_forwardPrefix, topic, message, packet)\n            topic = `${_forwardPrefix}${topic}`\n            p.topics.forEach((topic, k) => {\n              logger.verbose(`being forwarded to topic = ${topic}`)\n              logger.verbose(`options = ${JSON.stringify(p.options)}`)\n              _forwardClient.publish(`${topic}`, p.payload, p.options)\n            })\n            logger.debug(message)\n          }\n        })\n        _mqtt.on('close', _callbacks.on_close)\n        _mqtt.on('error', _callbacks.on_error)\n        _mqtt.on('connect', (connack) => {\n          logger.verbose(` ${connectString} connected.`)\n          _callbacks.on_connected.call(this, connack)\n          subTopics.forEach((topic, idx) => {\n            logger.verbose(`[${idx}] ${connectString} subscribing to topic: ${topic}`)\n            _mqtt.subscribe(topic)\n          })\n        })\n        return ret\n      },\n      register: (cbName, func) => {\n        if (_callbacks[cbName]) {\n          logger.debug(`register callback ${cbName}`)\n          _callbacks[cbName] = func\n        } else {\n          logger.debug(`try to register unlisted callback = ${cbName}`)\n        }\n        return ret\n      },\n      forward: (mqttClient, options) => {\n        options.prefix = options.prefix || ''\n        _converterFn = options.fn || _converterFn\n        logger.verbose(`prefix = ${options.prefix}`);\n        [_forwardClient, _forwardPrefix] = [mqttClient, options.prefix]\n        return ret\n      },\n      publish: (topic, payload) => {\n        logger.verbose(`being published to ${topic}`)\n        _mqtt.publish(topic, payload)\n      }\n    }\n\n    if (autoconnect) {\n      ret.connect()\n    }\n    return ret\n  }\n}\n"],"sourceRoot":"/Users/nat/projects/traffy/easy-mqtt/dist"}